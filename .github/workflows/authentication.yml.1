name: Authentication Workflow

on:
  workflow_call:
    inputs:
      AWS_REGION:
        description: AWS Region - even though a global service - still needs defining
        required: true
        type: string
    outputs:
      AWS_ACCESS_KEY_ID: 
        value: ${{ jobs.authenticate_aws.outputs.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: 
        value: ${{ jobs.authenticate_aws.outputs.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: 
        value: ${{ jobs.authenticate_aws.outputs.AWS_SESSION_TOKEN }}
      AWS_REGION: 
        value: ${{ inputs.AWS_REGION }}

permissions:
  id-token: write
  contents: read

#jobs:
  #authenticate_az:
    #runs-on: ubuntu-latest

    #steps:
      #- name: Checkout Code
        #uses: actions/checkout@v4

      # Authenticate with Azure
      #- name: Authenticate with Azure
      #  uses: azure/login@v1
      #  with:
      #    client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #    tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #    subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      #- name: Show Subscription
      #  run: |
      #    az account show

  authenticate_aws:
    runs-on: ubuntu-latest

    outputs:
      #AWS_ACCESS_KEY_ID: ${{ steps.assume_execution_role.outputs.aws-access-key-id }}
      #AWS_SECRET_ACCESS_KEY: ${{ steps.assume_execution_role.outputs.aws-secret-access-key }}
      #AWS_SESSION_TOKEN: ${{ steps.assume_execution_role.outputs.aws-session-token }}

      AWS_ACCESS_KEY_ID: ${{ steps.encode.outputs.ENCODED_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ steps.encode.outputs.ENCODED_AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ steps.encode.outputs.ENCODED_AWS_SESSION_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Configure AWS Credentials for OIDC Role
      - name: Configure AWS Credentials
        id: assume_oidc_role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_GITHUB_OIDC_ROLE_ARN }}
          role-duration-seconds: 3600
          role-skip-session-tagging: true
          output-credentials: true

      # Assume AWS Execution Role
      - name: Assume Execution Role
        id: assume_execution_role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          role-to-assume: ${{ secrets.AWS_GITHUB_OIDC_EXECUTION_ROLE_ARN }}
          aws-region: ${{ inputs.AWS_REGION }}
          role-duration-seconds: 3000
          role-skip-session-tagging: true
          output-credentials: true

      - name: Test Access
        run: |
          echo "AWS_ACCESS_KEY_ID: ${{ steps.assume_execution_role.outputs.aws-access-key-id }}" | base64
          echo "AWS_SECRET_ACCESS_KEY: ${{ steps.assume_execution_role.outputs.aws-secret-access-key }}" | base64
          echo "AWS_SESSION_TOKEN: ${{ steps.assume_execution_role.outputs.aws-session-token }}" | base64


      - name: Encode Outputs to Base64
        id: encode
        run: |
          echo "ENCODED_AWS_ACCESS_KEY_ID=$(echo -n $AWS_ACCESS_KEY_ID | base64)" >> $GITHUB_OUTPUT
          echo "ENCODED_AWS_SECRET_ACCESS_KEY=$(echo -n $AWS_SECRET_ACCESS_KEY | base64)" >> $GITHUB_OUTPUT
          echo "ENCODED_AWS_SESSION_TOKEN=$(echo -n $AWS_SESSION_TOKEN | base64)" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
